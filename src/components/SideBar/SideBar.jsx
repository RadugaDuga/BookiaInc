import { useEffect, useState, useRef } from "react";
import ReactDOM from "react-dom";
import styles from "./SideBar.module.css"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è SideBar
import { useTheme } from "../../ThemeProvider";
import { useLocomotiveScroll } from "react-locomotive-scroll";
import gsap from "gsap";

const SideBar = () => {
	const { scroll } = useLocomotiveScroll();
	const { theme, toggleTheme } = useTheme();

	const [activeSection, setActiveSection] = useState("");

	const lineRef = useRef(null); // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ –¥–ª—è –ø–∞–ª–æ—á–∫–∏
	const buttonsRefs = useRef([]); // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —Å–µ–∫—Ü–∏–∏
	const scrollToSection = (targetId) => () => {
		const target = document.querySelector(targetId);
		if (scroll && target) {
			scroll.scrollTo(target);
		}
	};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –∫–Ω–æ–ø–∫–∏
	const getButtonClassName = (sectionId) => {
		return activeSection === sectionId
			? `${styles.button} ${styles.active}`
			: styles.button;
	};

	useEffect(() => {
		const sections = document.querySelectorAll("section");

		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						setActiveSection(entry.target.id);
					}
				});
			},
			{
				threshold: 0.3,
			}
		);

		sections.forEach((section) => observer.observe(section));

		return () => {
			sections.forEach((section) => observer.unobserve(section));
		};
	}, []);

	// –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–∞–ª–æ—á–∫–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏
	useEffect(() => {
		if (lineRef.current && buttonsRefs.current) {
			// –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
			buttonsRefs.current.forEach((button) => {
				gsap.to(button, {
					duration: 0.3,
					color: "", // –°–±—Ä–æ—Å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ü–≤–µ—Ç—É —Ç–µ–∫—Å—Ç–∞
					ease: "power3.out",
				});
			});

			const activeButton = buttonsRefs.current.find(
				(ref) => ref.dataset.section === activeSection
			);

			if (activeButton) {
				const { top, height } = activeButton.getBoundingClientRect();
				const offsetTop = top + window.scrollY; // –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –æ–∫–Ω–∞

				// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
				const colorMap = {
					"preview-section": "#FF6347", // –¶–≤–µ—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ "preview-section"
					"story-section": "#4682B4", // –¶–≤–µ—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ "story-section"
					"gradient-section": "#31CD32", // –¶–≤–µ—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ "skills-section"
					"skills-section": "#32CD32", // –¶–≤–µ—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ "skills-section"
					"arts-section": "#FFD700", // –¶–≤–µ—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ "arts-section"
					"contacts-section": "#FFD700", // –¶–≤–µ—Ç –¥–ª—è —Å–µ–∫—Ü–∏–∏ "arts-section"
				};

				const shadowColorMap = {
					"preview-section": "rgba(255, 99, 71, 1)", // –¶–≤–µ—Ç —Ç–µ–Ω–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "preview-section"
					"story-section": "rgba(70, 130, 180, 1)", // –¶–≤–µ—Ç —Ç–µ–Ω–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "story-section"
					"gradient-section": "rgba(50, 205, 50, 1)", // –¶–≤–µ—Ç —Ç–µ–Ω–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "skills-section"
					"skills-section": "rgba(50, 205, 50, 1)", // –¶–≤–µ—Ç —Ç–µ–Ω–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "skills-section"
					"arts-section": "rgba(255, 215, 0, 1)", // –¶–≤–µ—Ç —Ç–µ–Ω–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "arts-section"
					"contacts-section": "rgba(255, 215, 0, 1)", // –¶–≤–µ—Ç —Ç–µ–Ω–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "arts-section"
				};

				const lineColor = colorMap[activeSection] || "#000";
				const lineShadowColor =
					shadowColorMap[activeSection] || "rgba(0, 0, 0, 0.3)";

				// –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–∞–ª–æ—á–∫–∏ –∏ —Ç–µ–Ω–∏
				gsap.to(lineRef.current, {
					duration: 0.3,
					top: offsetTop,
					height: height,
					backgroundColor: lineColor, // –ê–Ω–∏–º–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –ø–∞–ª–æ—á–∫–∏
					ease: "power3.out",
				});

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–Ω–∏ —á–µ—Ä–µ–∑ CSS
				lineRef.current.style.boxShadow = `0 0 50px 5px ${lineShadowColor}`; // –¢–æ–ª—å–∫–æ —Ü–≤–µ—Ç —Ç–µ–Ω–∏ –º–µ–Ω—è–µ—Ç—Å—è

				// –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
				gsap.to(activeButton, {
					duration: 0.3,
					color: lineColor, // –ê–Ω–∏–º–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
					ease: "power3.out",
				});
			}
		}
	}, [activeSection]);

	return ReactDOM.createPortal(
		<div className={styles.overlay}>
			{/* –õ–∏–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è */}
			<div ref={lineRef} className={styles.line}></div>

			<button
				className={styles.button}
				title="Change theme"
				onClick={toggleTheme}
			>
				{theme === "light" ? "‚òÄÔ∏è" : "üåô"}
			</button>
			{[
				"preview-section",
				"story-section",
				"gradient-section",
				"skills-section",
				"arts-section",
				"contacts-section",
			].map((section, index) => (
				<button
					key={section}
					ref={(el) => (buttonsRefs.current[index] = el)} // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–µ—Ñ –∫ –∫–Ω–æ–ø–∫–µ
					data-section={section}
					className={getButtonClassName(section)}
					onClick={scrollToSection(`#${section}`)}
				>
					{`0${index + 1}`}
				</button>
			))}
		</div>,
		document.body
	);
};

export default SideBar;
